import org.gradle.internal.os.OperatingSystem

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        google()
    }
}

def existNdk() {
    def ndkDir = System.getenv('ANDROID_NDK_HOME')
    if( ndkDir == null )
    {
        ndkDir = System.getenv('ANDROID_NDK')
    }
    if( ndkDir == null )
    {
        ndkDir = System.getenv('NDKROOT')
    }
    if( ndkDir == null )
    {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkDir = properties.getProperty('ndk.dir')
    }
//    if( ndkDir == null )
//    {
//        throw new GradleException('NDK not found! Check your environment for ANDROID_NDK or your local.properties contains ndk.dir')
//    } else {
//        return ndkdir;
//    }
    return ndkDir;
}

def GetNDKBuildCmd() {

    def ndkDir = System.getenv('ANDROID_NDK_HOME')
    if( ndkDir == null )
    {
        ndkDir = System.getenv('ANDROID_NDK')
    }
    if( ndkDir == null )
    {
        ndkDir = System.getenv('NDKROOT')
    }
    if( ndkDir == null )
    {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        ndkDir = properties.getProperty('ndk.dir')
    }
//    if( ndkDir == null )
//    {
//        throw new GradleException('NDK not found! Check your environment for ANDROID_NDK or your local.properties contains ndk.dir')
//    }

    if (ndkDir == null) {
        printf("NDK not found! Check your environment for ANDROID_NDK or your local.properties contains ndk.dir")
        return null;
    }
    if ( OperatingSystem.current().isWindows() ) {
        return ndkDir + '/ndk-build.cmd'
    } else {
        return ndkDir + '/ndk-build'
    }
}


subprojects {

    if (GetNDKBuildCmd() == null) {
        return ;
    }

    task printProjectName << {
        println rootProject.name
    }

    task NDKBuildDebug(type: Exec) {
        commandLine GetNDKBuildCmd(), 'V=1', 'NDK_DEBUG=1'
    }

    task NDKBuildRelease(type: Exec) {
        commandLine GetNDKBuildCmd(), 'V=1', 'NDK_DEBUG=0'
    }

    task NDKBuildClean(type: Exec) {
        commandLine GetNDKBuildCmd(), 'clean'
    }

}
